var p=Object.defineProperty;var m=(r,e,t)=>e in r?p(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var d=(r,e,t)=>m(r,typeof e!="symbol"?e+"":e,t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const o of s)if(o.type==="childList")for(const a of o.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&n(a)}).observe(document,{childList:!0,subtree:!0});function t(s){const o={};return s.integrity&&(o.integrity=s.integrity),s.referrerPolicy&&(o.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?o.credentials="include":s.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function n(s){if(s.ep)return;s.ep=!0;const o=t(s);fetch(s.href,o)}})();class l{static async init(){const e=localStorage.getItem("venue-client-settings");if(e)try{this.settings=JSON.parse(e)}catch(t){console.error("Failed to parse stored settings:",t),this.settings={}}this.setDefaults()}static setDefaults(){const e={checkUSBInterval:3e4,startRestartWindow:2,endRestartWindow:6,invenueHost:null};Object.keys(e).forEach(t=>{this.settings[t]===void 0&&(this.settings[t]=e[t])})}static get(e){return this.settings[e]}static set(e,t){const n=this.settings[e];this.settings[e]=t,localStorage.setItem("venue-client-settings",JSON.stringify(this.settings)),this.listeners.forEach(s=>{try{s(e,t,n)}catch(o){console.error("Settings listener error:",o)}}),this.logger&&this.logger.log(`Setting updated: ${e} = ${t}`)}static registerOnChange(e){this.listeners.push(e)}static setLogger(e){this.logger=e}static get invenueHost(){return this.get("invenueHost")}static get checkUSBInterval(){return this.get("checkUSBInterval")}static get startRestartWindow(){return this.get("startRestartWindow")}static get endRestartWindow(){return this.get("endRestartWindow")}}d(l,"settings",{}),d(l,"listeners",[]),d(l,"logger",null);class i{static addLog(e,t,n=null){const o={timestamp:new Date().toISOString(),level:e,message:t,data:n};this.logs.push(o),this.trimLogs(),this.persistLogs()}static log(e,t=null){var o;const n=new Date().toISOString();(((o=this.originalConsole)==null?void 0:o.log)||console.log)(`[${n}] ${e}`,t||""),this.addLog("info",e,t)}static error(e,t=null){var o;const n=new Date().toISOString();(((o=this.originalConsole)==null?void 0:o.error)||console.error)(`[${n}] ${e}`,t||""),this.addLog("error",e,t)}static warn(e,t=null){var o;const n=new Date().toISOString();(((o=this.originalConsole)==null?void 0:o.warn)||console.warn)(`[${n}] ${e}`,t||""),this.addLog("warn",e,t)}static trimLogs(){this.logs.length>this.maxLogs&&(this.logs=this.logs.slice(-this.maxLogs))}static persistLogs(){try{localStorage.setItem("venue-client-logs",JSON.stringify(this.logs))}catch(e){console.error("Failed to persist logs:",e)}}static loadLogs(){try{const e=localStorage.getItem("venue-client-logs");e&&(this.logs=JSON.parse(e))}catch(e){console.error("Failed to load logs:",e),this.logs=[]}}static getLogs(){return[...this.logs]}static clearLogs(){this.logs=[],localStorage.removeItem("venue-client-logs")}}d(i,"logs",[]),d(i,"maxLogs",1e3);class y{constructor(){this.displays=[],this.mediaQuery=null,this.wakeLock=null}init(){this.detectDisplays(),this.setupDisplayChangeListener(),this.setupOrientationListener(),this.requestWakeLock()}detectDisplays(){var t;const e={id:"primary",width:screen.width,height:screen.height,availWidth:screen.availWidth,availHeight:screen.availHeight,colorDepth:screen.colorDepth,pixelDepth:screen.pixelDepth,orientation:((t=screen.orientation)==null?void 0:t.type)||"unknown"};this.displays=[e],i.log("Display detected:",e)}setupDisplayChangeListener(){window.addEventListener("resize",()=>{i.log("Screen resize detected"),this.detectDisplays()})}setupOrientationListener(){screen.orientation&&screen.orientation.addEventListener("change",()=>{i.log("Orientation changed:",screen.orientation.type),this.detectDisplays()})}getDisplays(){return[...this.displays]}async requestFullscreen(){try{if(!document.fullscreenElement){if(!document.documentElement.requestFullscreen){i.log("Fullscreen API not supported");return}await document.documentElement.requestFullscreen(),i.log("Entered fullscreen mode")}}catch(e){i.log("Fullscreen request denied (this is normal in some browsers):",e.message)}}async exitFullscreen(){try{document.fullscreenElement&&(await document.exitFullscreen(),i.log("Exited fullscreen mode"))}catch(e){i.error("Failed to exit fullscreen:",e)}}async lockOrientation(e){if(screen.orientation&&screen.orientation.lock)try{await screen.orientation.lock(e),i.log(`Orientation locked to: ${e}`)}catch(t){i.error("Failed to lock orientation:",t)}}async requestWakeLock(){if("wakeLock"in navigator)try{this.wakeLock=await navigator.wakeLock.request("screen"),i.log("Screen wake lock acquired"),this.wakeLock.addEventListener("release",()=>{i.log("Wake lock was released - reacquiring..."),setTimeout(()=>this.requestWakeLock(),1e3)}),document.addEventListener("visibilitychange",()=>{!document.hidden&&!this.wakeLock&&this.requestWakeLock()})}catch(e){i.log("Wake lock not available:",e.message),this.simulateActivity()}else i.log("Wake lock API not supported - using activity simulation"),this.simulateActivity()}simulateActivity(){const e=document.createElement("video");e.style.position="absolute",e.style.top="-1px",e.style.left="-1px",e.style.width="1px",e.style.height="1px",e.style.opacity="0",e.muted=!0,e.loop=!0,e.src="data:video/mp4;base64,AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMWF2YzEAAAAIZnJlZQAAAr1tZGF0AAACrgYF//+q3EXpvebZSLeWLNgg2SPu73gyNjQgLSBjb3JlIDE1MiByMjg1NCBlOWE1OTAzIC0gSC4yNjQvTVBFRy00IEFWQyBjb2RlYyAtIENvcHlsZWZ0IDIwMDMtMjAxNyAtIGh0dHA6Ly93d3cudmlkZW9sYW4ub3JnL3gyNjQuaHRtbCAtIG9wdGlvbnM6IGNhYmFjPTEgcmVmPTMgZGVibG9jaz0xOjA6MCBhbmFseXNlPTB4MzoweDExMyBtZT1oZXggc3VibWU9NyBwc3k9MSBwc3lfcmQ9MS4wMDowLjAwIG1peGVkX3JlZj0xIG1lX3JhbmdlPTE2IGNocm9tYV9tZT0xIHRyZWxsaXM9MSA4eDhkY3Q9MSBjcW09MCBkZWFkem9uZT0yMSwxMSBmYXN0X3Bza2lwPTEgY2hyb21hX3FwX29mZnNldD0tMiB0aHJlYWRzPTMgbG9va2FoZWFkX3RocmVhZHM9MSBzbGljZWRfdGhyZWFkcz0wIG5yPTAgZGVjaW1hdGU9MSBpbnRlcmxhY2VkPTAgYmx1cmF5X2NvbXBhdD0wIGNvbnN0cmFpbmVkX2ludHJhPTAgYmZyYW1lcz0zIGJfcHlyYW1pZD0yIGJfYWRhcHQ9MSBiX2JpYXM9MCBkaXJlY3Q9MSB3ZWlnaHRiPTEgb3Blbl9nb3A9MCB3ZWlnaHRwPTIga2V5aW50PTI1MCBrZXlpbnRfbWluPTEwIHNjZW5lY3V0PTQwIGludHJhX3JlZnJlc2g9MCByY19sb29rYWhlYWQ9NDAgcmM9Y3JmIG1idHJlZT0xIGNyZj0yMy4wIHFjb21wPTAuNjAgcXBtaW49MCBxcG1heD02OSBxcHN0ZXA9NCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAABWWWIhAA3//728P4FNjuY0JcRzeidDNtgUg==",document.body.appendChild(e),e.play().catch(()=>{}),setInterval(()=>{document.dispatchEvent(new KeyboardEvent("keydown",{key:"Shift"})),document.dispatchEvent(new MouseEvent("mousemove",{clientX:1,clientY:1})),document.dispatchEvent(new Event("touchstart"))},3e3)}releaseWakeLock(){this.wakeLock&&(this.wakeLock.release(),this.wakeLock=null,i.log("Screen wake lock released"))}}class f{constructor(){this.baseUrl=null,this.deviceId=null,this.isConnected=!1,this.secondaryWindow=null,this.secondaryWindowOpened=!1,this.generateDeviceId()}init(e){this.baseUrl=e,console.log("API Client initialized with baseUrl:",e),this.startSession()}updateHost(e){this.baseUrl=e,i.log(`API host updated to: ${e}`)}async generateDeviceId(){var e;if((e=window.config)!=null&&e.deviceId){this.deviceId=window.config.deviceId,i.log(`Using config device ID: ${this.deviceId}`);return}if(i.log(`navigator.managed is ${navigator.managed?"TRUE":"FALSE"}`),navigator.managed&&typeof navigator.managed.getSerialNumber=="function")try{i.log("Attempting getSerialNumber()...");const t=await navigator.managed.getSerialNumber();if(i.log("Serial number:",t),t){this.deviceId=t,i.log(`Using serial number as device ID: ${this.deviceId}`);return}}catch(t){i.error("getSerialNumber failed:",t.name,t.message)}else i.log("getSerialNumber method not available")}async makeRequest(e,t={}){if(!this.baseUrl)throw new Error("API base URL not configured");const n=new URL(e,this.baseUrl).toString();console.log("Making request to:",n);const o={...{method:"GET",headers:{"Content-Type":"application/json","X-Device-ID":this.deviceId}},...t};try{const a=await fetch(n,o);if(!a.ok)throw new Error(`HTTP ${a.status}: ${a.statusText}`);const c=await a.json();return this.isConnected=!0,c}catch(a){throw this.isConnected=!1,i.error(`API request failed: ${n}`,a),a}}async findDevice(){try{const e=await this.makeRequest(`/v1/invenue-service/display-devices/google/${encodeURIComponent(this.deviceId)}`);return i.log("Device found:",e),e}catch(e){throw i.error("Find device failed:",e),e}}async sendConnect(){try{const e=this.getDisplaysForConnect(),t=this.serialNumber||this.deviceId,n=await this.makeRequest(`/v1/invenue-service/display-devices/${encodeURIComponent(t)}/connect`,{method:"POST",body:JSON.stringify({displays:e})});return i.log("Connect successful:",n),this.handleConnectResponse(n),n}catch(e){throw i.error("Connect failed:",e),e}}getDisplaysForConnect(){if(this.detectedScreens&&this.detectedScreens.length>0){const e=this.detectedScreens.map(t=>({width:t.width,height:t.height,left:t.left,top:t.top}));return i.log(`Using ${e.length} detected displays`),e}else return i.log("Using single primary display"),[{width:screen.width,height:screen.height}]}handleConnectResponse(e){this.storeConnectData(e),this.handleMultipleURLs(e),this.updateUI(e)}storeConnectData(e){e.urls&&(localStorage.setItem("venue-url-1",e.urls[0]||""),localStorage.setItem("venue-url-2",e.urls[1]||""),localStorage.setItem("venue-urls-updated",Date.now().toString()),i.log("Display URLs:",e.urls)),e.terminalNumber&&localStorage.setItem("venue-terminal-number",e.terminalNumber),e.assetId&&localStorage.setItem("venue-tab-asset-id",e.assetId)}handleMultipleURLs(e){var o;if(!e.urls||e.urls.length<=1)return;const n=new URLSearchParams(window.location.search).get("display"),s=this.detectedScreens&&this.detectedScreens.length>1;i.log(`Auto-open check: URLs=${e.urls.length}, displayParam='${n}', screens=${((o=this.detectedScreens)==null?void 0:o.length)||1}`),(!n||n==="1")&&!this.secondaryWindowOpened?s?(i.log("Multiple URLs and screens detected - auto-opening second display"),this.secondaryWindowOpened=!0,this.openSecondDisplay()):i.log("Multiple URLs but only 1 screen - showing URL 1 only"):i.log("Auto-open skipped - single URL, secondary instance, or already opened")}updateUI(e){var a;if(!e.urls||!((a=window.app)!=null&&a.ui)){i.log("UpdateUI skipped - no URLs or UI not available");return}const t=new URLSearchParams(window.location.search),n=parseInt(t.get("display")||"1")-1,s=e.urls[n]||e.urls[0],o=e.displays&&e.displays[n];i.log(`UpdateUI: displayNumber=${n}, urlToLoad='${s}', totalUrls=${e.urls.length}`),(o==null?void 0:o.orientation)!==void 0&&window.app.ui.setOrientation(o.orientation),(o==null?void 0:o.overscan)!==void 0&&window.app.ui.setOverscan(o.overscan),s?window.app.ui.loadContentUrl(s):i.log("No URL to load for this display")}async sendPoll(){try{const e=await this.getSystemInfo(),t=await this.getLocation(),n=this.serialNumber||this.deviceId,s=await this.makeRequest(`/v1/invenue-service/display-devices/${encodeURIComponent(n)}/poll`,{method:"POST",body:JSON.stringify({systemStatus:e,latitude:(t==null?void 0:t.latitude)||null,longitude:(t==null?void 0:t.longitude)||null})});return i.log("Poll successful:",s),this.isConnected=!0,s.actions&&this.handlePollActions(s.actions),s}catch(e){throw i.error("Poll failed:",e),this.isConnected=!1,e}}async getSystemInfo(){const e={userAgent:navigator.userAgent,platform:navigator.platform,language:navigator.language,screenWidth:screen.width,screenHeight:screen.height,colorDepth:screen.colorDepth,timezone:Intl.DateTimeFormat().resolvedOptions().timeZone,online:navigator.onLine,ipAddress:await this.getIpAddress()};return navigator.deviceMemory&&(e.deviceMemory=navigator.deviceMemory),navigator.connection&&(e.connection={effectiveType:navigator.connection.effectiveType,downlink:navigator.connection.downlink,rtt:navigator.connection.rtt}),navigator.hardwareConcurrency&&(e.hardwareConcurrency=navigator.hardwareConcurrency),e}async startSession(){const e=new URLSearchParams(window.location.search),t=e.get("display");if(e.get("ou-status")==="unallocated"){i.log("Unallocated device mode - showing device info screen"),await this.showUnallocatedScreen();return}!t||t==="1"?(i.log("Primary instance - handling API calls"),await this.startPrimarySession()):(i.log(`Secondary instance (display=${t}) - listening for updates`),this.startSecondarySession())}async startPrimarySession(){if(!this.deviceId){i.log("No device ID available - skipping API calls");return}try{await this.detectScreens(!0);const e=await this.findDevice();e.serialNumber&&(this.serialNumber=e.serialNumber,i.log(`Got serial number: ${this.serialNumber}`));const t=await this.sendConnect();this.sendPoll();const n=t.pollInterval||3e4;this.startPolling(n)}catch(e){i.error("Session start failed:",e),setTimeout(()=>{this.startPrimarySession()},3e4)}}startSecondarySession(){window.addEventListener("storage",e=>{if(e.key==="venue-urls-updated")i.log("URLs updated by primary instance"),this.loadSecondaryContent();else if(e.key==="close-secondary-windows")i.log("Received close signal - closing secondary window"),window.close();else if(e.key==="identify-action"){const t=JSON.parse(e.newValue);i.log("Received identify action:",t.action),window.app&&window.app.ui&&(t.action==="identify"?window.app.ui.showIdentify(t.displayTime||10):t.action==="clear-identify"&&window.app.ui.hideIdentify())}}),this.loadSecondaryContent()}loadSecondaryContent(){const e=new URLSearchParams(window.location.search),t=parseInt(e.get("display")||"1")-1,n=localStorage.getItem("venue-url-1"),s=localStorage.getItem("venue-url-2"),o=[n,s].filter(Boolean);if(o.length>t){const a=o[t];window.app&&window.app.ui&&window.app.ui.loadContentUrl(a)}}handlePollActions(e){e.forEach(t=>{i.log("Processing action:",t.action),t.action==="reconnect"?(i.log("Reconnect requested - calling /connect"),this.sendConnect()):t.action==="reboot"?(i.log("Reboot requested - reloading page"),window.location.reload()):t.action==="identify"?(i.log("Identify action received"),localStorage.setItem("identify-action",JSON.stringify({action:"identify",displayTime:t.displayTime||10,timestamp:Date.now()})),window.app&&window.app.ui&&window.app.ui.showIdentify(t.displayTime||10)):t.action==="clear-identify"?(i.log("Clear identify action received"),localStorage.setItem("identify-action",JSON.stringify({action:"clear-identify",timestamp:Date.now()})),window.app&&window.app.ui&&window.app.ui.hideIdentify()):t.action==="clear-cache"&&(i.log("Clear cache requested"),"caches"in window&&caches.keys().then(n=>{n.forEach(s=>caches.delete(s))}))})}async getIpAddress(){try{return new Promise(e=>{const t=new RTCPeerConnection({iceServers:[]});t.createDataChannel(""),t.onicecandidate=n=>{if(n.candidate){const o=n.candidate.candidate.match(/([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/);if(o&&!o[1].startsWith("127.")){t.close(),e(o[1]);return}}},t.createOffer().then(n=>t.setLocalDescription(n)),setTimeout(()=>{t.close(),e(null)},3e3)})}catch(e){return i.log("Failed to get IP address:",e),null}}async getLocation(){try{const e=await this.getChromeOSLocation();return e||(navigator.geolocation?new Promise(t=>{navigator.geolocation.getCurrentPosition(n=>{t({latitude:n.coords.latitude,longitude:n.coords.longitude})},n=>{i.log("Geolocation error:",n.message),t(null)},{timeout:1e4,enableHighAccuracy:!0,maximumAge:3e5})}):(i.log("Geolocation not supported"),null))}catch(e){return i.log("Failed to get location:",e),null}}async getChromeOSLocation(){try{if(window.chrome&&chrome.runtime&&chrome.runtime.getManifest){const e=localStorage.getItem("chrome-os-device-location");if(e)return JSON.parse(e)}return null}catch(e){return i.log("Chrome OS location not available:",e),null}}getConnectionStatus(){return{isConnected:this.isConnected,baseUrl:this.baseUrl,deviceId:this.deviceId}}updateDisplays(e){this.detectedScreens=e,i.log("Updated display information:",e.length,"screens"),this.isConnected&&(i.log("Reconnecting to update display information..."),this.sendConnect())}openSecondDisplay(){localStorage.setItem("close-secondary-windows",Date.now().toString());const e=new URL(window.location);e.searchParams.set("display","2");let t="fullscreen=yes";if(this.detectedScreens&&this.detectedScreens.length>1){const n=this.detectedScreens[1];t=`left=${n.left},top=${n.top},width=${n.width},height=${n.height}`,i.log(`Positioning window on screen 2 at (${n.left}, ${n.top})`)}this.secondaryWindow=window.open(e.toString(),"_blank",t),this.secondaryWindow?(i.log("Auto-opened second display window"),setTimeout(()=>{var n,s;this.secondaryWindow.document&&((s=(n=this.secondaryWindow.document.documentElement).requestFullscreen)==null||s.call(n))},1e3)):(i.error("Failed to auto-open second window - popup blocked by browser"),this.showPopupBlockedNotification(e.toString()))}showPopupBlockedNotification(e){const t=document.createElement("div");t.id="popup-blocked-notification",t.style.cssText=`
      position: fixed;
      top: 20px;
      right: 20px;
      background: #ff4444;
      color: white;
      padding: 15px;
      border-radius: 8px;
      z-index: 10000;
      max-width: 300px;
      font-family: Arial, sans-serif;
      font-size: 14px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    `,t.innerHTML=`
      <div style="margin-bottom: 10px;"><strong>Popup Blocked</strong></div>
      <div style="margin-bottom: 10px;">Second display window was blocked by browser.</div>
      <button onclick="window.open('${e}', '_blank'); this.parentElement.remove();" 
              style="background: white; color: #ff4444; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer; margin-right: 5px;">Open Manually</button>
      <button onclick="this.parentElement.remove();" 
              style="background: rgba(255,255,255,0.2); color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer;">Dismiss</button>
    `,document.body.appendChild(t),setTimeout(()=>{t.parentElement&&t.remove()},1e4),i.log("Popup blocked notification shown")}async detectScreens(e=!1){if(!("getScreenDetails"in window))return i.log("Multi-screen API not available"),!1;let t=!1;try{const{state:n}=await navigator.permissions.query({name:"window-management"});t=n==="granted",i.log(`Window management permission: ${n}`)}catch(n){i.log("Permission query failed:",n.message)}if(e&&!t)return i.log("Window management permission not granted - skipping detection"),!1;try{i.log("Attempting screen detection...");const n=await window.getScreenDetails();return this.detectedScreens=n.screens,i.log(`Detected ${n.screens.length} screens`),n.screens.forEach((s,o)=>{i.log(`Screen ${o+1}: ${s.width}x${s.height} at (${s.left}, ${s.top})`)}),this.screenMonitoringSetup||(this.setupScreenMonitoring(n),this.screenMonitoringSetup=!0),!0}catch(n){return i.log("Screen detection failed:",n.message),!1}}setupScreenMonitoring(e){try{e.addEventListener("screenschange",()=>{i.log("Screen configuration changed - re-evaluating displays"),this.handleScreenChange()}),i.log("Screen change monitoring enabled")}catch(t){i.log("Screen monitoring setup failed:",t.message)}}async handleScreenChange(){var a,c;const e=((a=this.detectedScreens)==null?void 0:a.length)||1;await this.detectScreens(!1);const t=((c=this.detectedScreens)==null?void 0:c.length)||1;i.log(`Screen count changed: ${e} → ${t}`);const n=localStorage.getItem("venue-url-1"),s=localStorage.getItem("venue-url-2"),o=n&&s;if(t>1&&o&&!this.secondaryWindowOpened){const h=new URLSearchParams(window.location.search).get("display");(!h||h==="1")&&(i.log("Multiple screens detected with multiple URLs - auto-opening second display"),this.secondaryWindowOpened=!0,this.openSecondDisplay())}t===1&&e>1&&(i.log("Screen count decreased to 1 - closing secondary windows"),this.closeSecondaryWindows()),this.isConnected&&(i.log("Updating server with new screen configuration"),this.sendConnect())}closeSecondaryWindows(){this.secondaryWindow&&!this.secondaryWindow.closed&&(i.log("Closing secondary window"),this.secondaryWindow.close(),this.secondaryWindow=null),localStorage.setItem("close-secondary-windows",Date.now().toString()),this.secondaryWindowOpened=!1}async showUnallocatedScreen(){var e;try{const t=await this.getDeviceAttributes();(e=window.app)!=null&&e.ui&&window.app.ui.showUnallocatedDevice(t)}catch(t){i.error("Failed to get device attributes:",t)}}async getDeviceAttributes(){const e=new URLSearchParams(window.location.search),t={directoryDeviceId:null,serialNumber:null,assetId:null,location:null,ipAddress:await this.getIpAddress(),osVersion:this.getOSVersion(),clientVersion:"1.0.31",displayNumber:e.get("display")||"1"};if(navigator.managed)try{t.directoryDeviceId=await navigator.managed.getDirectoryId(),t.serialNumber=await navigator.managed.getSerialNumber(),t.assetId=await navigator.managed.getAnnotatedAssetId(),t.location=await navigator.managed.getAnnotatedLocation()}catch(n){i.log("Some device attributes not available:",n)}return t}checkPolicyStatus(){try{window.chrome&&chrome.management&&chrome.management.get(chrome.runtime.id,n=>{i.log("Extension info:",n)});const e=window.location.search.includes("kiosk")||document.fullscreenElement!==null||window.outerHeight===screen.height;i.error("Kiosk mode detected: "+e);const t=!!navigator.managed;i.error("Managed context: "+t),i.error("Current URL for policy: "+window.location.origin)}catch(e){i.log("Policy check failed:",e.message)}}getOSVersion(){const t=navigator.userAgent.match(/CrOS\s+\S+\s+([^\)]+)/);return t?`Chrome OS ${t[1]}`:navigator.platform||"Unknown"}startPolling(e){this.pollInterval=e,this.setupVisibilityHandling(),this.scheduleNextPoll(),this.keepScreenAwake()}keepScreenAwake(){typeof document.hidden<"u"&&document.addEventListener("visibilitychange",()=>{var t;document.hidden?i.log("App went to background - maintaining wake lock"):(i.log("App came to foreground - ensuring wake lock active"),(t=window.app)!=null&&t.displayManager&&window.app.displayManager.requestWakeLock())}),setInterval(()=>{document.hidden||document.dispatchEvent(new MouseEvent("mousemove",{clientX:1,clientY:1}))},5e3)}setupVisibilityHandling(){this.visibilityHandlerSetup||(document.addEventListener("visibilitychange",()=>{document.hidden?i.log("Tab hidden - polling may be throttled"):(i.log("Tab visible - resuming normal polling"),this.sendPoll(),this.scheduleNextPoll())}),this.visibilityHandlerSetup=!0)}scheduleNextPoll(){this.pollTimeout&&clearTimeout(this.pollTimeout),this.pollTimeout=setTimeout(()=>{this.sendPoll(),this.scheduleNextPoll()},this.pollInterval)}}class w{constructor(e){this.app=e,this.settingsVisible=!1,this.init()}init(){this.createUI(),this.setupEventListeners(),this.captureConsoleMessages(),this.updateConnectionStatus(),setInterval(()=>{this.updateConnectionStatus()},5e3)}captureConsoleMessages(){const e=console.log,t=console.error,n=console.warn,s=console.info;i.originalConsole={log:e,error:t,warn:n,info:s},console.log=(...o)=>{const a=new Date().toISOString();i.logs.push({timestamp:a,level:"info",message:"CONSOLE: "+o.join(" "),data:null}),e.apply(console,o)},console.error=(...o)=>{const a=new Date().toISOString();i.logs.push({timestamp:a,level:"error",message:"CONSOLE ERROR: "+o.join(" "),data:null}),t.apply(console,o)},console.warn=(...o)=>{const a=new Date().toISOString();i.logs.push({timestamp:a,level:"warn",message:"CONSOLE WARN: "+o.join(" "),data:null}),n.apply(console,o)},console.info=(...o)=>{const a=new Date().toISOString();i.logs.push({timestamp:a,level:"info",message:"CONSOLE INFO: "+o.join(" "),data:null}),s.apply(console,o)}}createUI(){const e=document.getElementById("app");e.innerHTML=`
      <div class="venue-content">
        <div id="content-frame"></div>
        <div class="device-info" style="position: fixed; bottom: 10px; left: 10px; font-size: 12px; background: rgba(0,0,0,0.7); padding: 5px; border-radius: 3px;">
          <p>Device: ${this.app.apiClient.deviceId}</p>
          <p>Screen: ${screen.width}x${screen.height}</p>
        </div>
      </div>
      
      <div class="status-indicator" id="status-indicator">
        Connecting...
      </div>
      
      <div class="settings-panel" id="settings-panel">
        <h3>Settings <span style="float: right; font-size: 14px; font-weight: normal; color: #999;">v${this.getVersion()}</span></h3>
        <div class="setting-group">
          <label for="invenue-host">InVenue Host:</label>
          <input type="url" id="invenue-host" value="${l.invenueHost||""}" placeholder="https://api.example.com">
        </div>
        
        <div class="setting-group">
          <label>IP Address:</label>
          <span id="ip-address">Loading...</span>
        </div>

        <div class="setting-group">
          <label>Zoom:</label>
          <button onclick="window.ui.zoomOut()">-</button>
          <span id="zoom-level">100%</span>
          <button onclick="window.ui.zoomIn()">+</button>
          <button onclick="window.ui.resetZoom()">Reset</button>
        </div>
        <button onclick="window.ui.saveSettings()">Save</button>
        <button onclick="window.ui.toggleSettings()">Close</button>
        <button onclick="window.ui.showLogs()">View Logs</button>
        <button onclick="window.ui.detectScreens()">Detect Screens</button>
        <button onclick="window.ui.openSecondDisplay()">Open Display 2</button>
      </div>
      
      <div class="logs-panel" id="logs-panel" style="display: none; position: fixed; top: 50px; right: 20px; width: 700px; height: 400px; background: rgba(0,0,0,0.9); color: white; border-radius: 8px; font-family: monospace; font-size: 12px; z-index: 2000;">
        <div style="position: sticky; top: 0; background: rgba(0,0,0,0.9); padding: 10px; border-bottom: 1px solid #333; z-index: 1;">
          <h3 style="margin: 0;">Logs 
            <button onclick="window.ui.hideLogs()" style="float: right; background: #666; color: white; border: none; padding: 2px 8px; cursor: pointer;">×</button>
            <button onclick="window.ui.copyLogs()" style="background: #4CAF50; color: white; border: none; padding: 2px 8px; cursor: pointer; margin-right: 5px;">Copy</button>
            <button onclick="window.ui.clearLogs()" style="background: #4CAF50; color: white; border: none; padding: 2px 8px; cursor: pointer; margin-right: 5px;">Clear</button>
            <button onclick="window.ui.toggleLogsRefresh()" id="logs-refresh-btn" style="background: #f44336; color: white; border: none; padding: 2px 8px; cursor: pointer; margin-right: 5px;">Pause</button>
          </h3>
        </div>
        <div id="logs-content" style="padding: 10px; height: 340px; overflow-y: auto;"></div>
      </div>
    `,window.ui=this}setupEventListeners(){document.addEventListener("keydown",e=>{e.ctrlKey&&e.key==="s"&&(e.preventDefault(),this.toggleSettings()),e.key==="F11"&&(e.preventDefault(),this.toggleFullscreen())}),document.addEventListener("dblclick",()=>{this.toggleSettings()}),window.addEventListener("offline",()=>{i.log("Network disconnected - showing splash screen and identify overlay"),this.showSplashScreen(!0),this.showIdentify(0)}),window.addEventListener("online",()=>{i.log("Network reconnected"),this.hideIdentify();const t=new URLSearchParams(window.location.search).get("display")||"1",n=localStorage.getItem(`venue-url-${t}`);n&&this.loadContentUrl(n)})}toggleSettings(){this.settingsVisible=!this.settingsVisible,document.getElementById("settings-panel").classList.toggle("visible",this.settingsVisible),this.settingsVisible&&this.updateIPAddress()}async updateIPAddress(){const e=document.getElementById("ip-address");if(e)try{const t=await this.app.apiClient.getIpAddress();t?e.textContent=t:e.textContent="IP address not available"}catch{e.textContent="Error getting IP"}}saveSettings(){const e=document.getElementById("invenue-host").value;e&&l.set("invenueHost",e),i.log("Settings saved"),this.toggleSettings()}clearLogs(){i.clearLogs(),i.log("Logs cleared"),document.getElementById("logs-panel").style.display==="block"&&this.refreshLogs()}showLogs(){this.refreshLogs(),document.getElementById("logs-panel").style.display="block",this.logsRefreshEnabled=!0,this.logsInterval=setInterval(()=>{document.getElementById("logs-panel").style.display==="block"&&this.logsRefreshEnabled&&this.refreshLogs()},2e3)}refreshLogs(){const e=i.getLogs(),t=document.getElementById("logs-content"),n=t.scrollTop+t.clientHeight>=t.scrollHeight-5;t.innerHTML=e.map(s=>`<div>[${s.timestamp}] ${s.level.toUpperCase()}: ${s.message}</div>`).join(""),n&&(t.scrollTop=t.scrollHeight)}hideLogs(){document.getElementById("logs-panel").style.display="none",this.logsInterval&&(clearInterval(this.logsInterval),this.logsInterval=null)}copyLogs(){const t=i.getLogs().map(n=>`[${n.timestamp}] ${n.level.toUpperCase()}: ${n.message}`).join(`
`);navigator.clipboard&&navigator.clipboard.writeText?navigator.clipboard.writeText(t).then(()=>{i.log("Logs copied to clipboard")}).catch(n=>{i.log("Clipboard API failed, trying fallback method"),this.fallbackCopyLogs(t)}):this.fallbackCopyLogs(t)}fallbackCopyLogs(e){try{const t=document.createElement("textarea");t.value=e,t.style.position="fixed",t.style.opacity="0",document.body.appendChild(t),t.select(),t.setSelectionRange(0,99999);const n=document.execCommand("copy");document.body.removeChild(t),n?i.log("Logs copied to clipboard (fallback method)"):i.error("Failed to copy logs - copy not supported")}catch(t){i.error("Fallback copy failed:",t.message)}}toggleLogsRefresh(){this.logsRefreshEnabled=!this.logsRefreshEnabled;const e=document.getElementById("logs-refresh-btn");this.logsRefreshEnabled?(e.textContent="Pause",e.style.background="#f44336",i.log("Logs refresh resumed")):(e.textContent="Resume",e.style.background="#4CAF50",i.log("Logs refresh paused"))}updateConnectionStatus(){const e=document.getElementById("status-indicator");this.app.apiClient.getConnectionStatus().isConnected?(e.textContent="Connected",e.className="status-indicator connected"):(e.textContent="Disconnected",e.className="status-indicator disconnected")}async toggleFullscreen(){document.fullscreenElement?await this.app.displayManager.exitFullscreen():await this.app.displayManager.requestFullscreen()}loadContentUrl(e){const t=document.getElementById("content-frame");if(e){this.showSplashScreen(!0);const n=document.createElement("iframe");n.src=e,this.currentOverscan?n.style.cssText="width: 100%; height: 100%; border: none;":n.style.cssText="width: 100vw; height: 100vh; border: none;",n.onload=()=>{setTimeout(()=>{this.showSplashScreen(!1)},1e3)},n.onerror=()=>{i.error("Failed to load content URL:",e)},t.innerHTML="",t.appendChild(n),i.log("Loading content URL:",e)}else this.showSplashScreen(!0),t.innerHTML='<div style="display: flex; align-items: center; justify-content: center; height: 100vh; color: white;"><h2>Waiting for content URL...</h2></div>'}showSplashScreen(e){let t=document.getElementById("splash-screen");!t&&e&&(t=document.createElement("div"),t.id="splash-screen",t.style.cssText=`
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: #000 url('/splash-${screen.height>screen.width?"portrait":"landscape"}-tab.svg') center center no-repeat;
        background-size: contain;
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
      `,document.body.appendChild(t)),t&&(t.style.display=e?"flex":"none"),i.log(`Splash screen ${e?"shown":"hidden"}`)}setOrientation(e){this.currentRotation=e,this.updateTransform();const t=document.getElementById("app");e===0?t.style.transform="none":(t.style.transform=`rotate(${e}deg)`,t.style.transformOrigin="center center"),e===90||e===270?(t.style.width="100vh",t.style.height="100vw"):(t.style.width="100vw",t.style.height="100vh"),i.log(`Applied CSS rotation: ${e} degrees`)}setOverscan(e){const t=document.getElementById("content-frame");this.currentOverscan=e,e?(t.style.position="absolute",t.style.top="40px",t.style.left="40px",t.style.right="40px",t.style.bottom="40px",t.style.width="auto",t.style.height="auto"):(t.style.position="static",t.style.top="auto",t.style.left="auto",t.style.right="auto",t.style.bottom="auto",t.style.width="100vw",t.style.height="100vh");const n=t.querySelector("iframe");n&&(e?(n.style.width="100%",n.style.height="100%"):(n.style.width="100vw",n.style.height="100vh")),i.log(`Applied CSS overscan: ${e}`)}updateTransform(){const e=document.getElementById("content-frame"),t=this.currentZoom||1;t===1?e.style.transform="none":(e.style.transform=`scale(${t})`,e.style.transformOrigin="center center")}zoomIn(){this.currentZoom=(this.currentZoom||1)+.1,this.updateTransform(),this.updateZoomDisplay(),i.log(`Zoom in: ${Math.round(this.currentZoom*100)}%`)}zoomOut(){this.currentZoom=Math.max(.1,(this.currentZoom||1)-.1),this.updateTransform(),this.updateZoomDisplay(),i.log(`Zoom out: ${Math.round(this.currentZoom*100)}%`)}resetZoom(){this.currentZoom=1,this.updateTransform(),this.updateZoomDisplay(),i.log("Zoom reset to 100%")}updateZoomDisplay(){const e=document.getElementById("zoom-level");e&&(e.textContent=`${Math.round((this.currentZoom||1)*100)}%`)}showIdentify(e){const t=document.createElement("div");t.id="identify-overlay",t.style.cssText=`
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      pointer-events: none;
      z-index: 9999;
    `;const n=localStorage.getItem("venue-terminal-number")||"",s=localStorage.getItem("venue-tab-asset-id")||"",o=new URLSearchParams(window.location.search).get("display")||"1";let a="";n&&(a=`${n}/${o}`);let c="";if(s){let g=s;const h=g.indexOf("-");h>0&&(g=g.substring(h+1)),c=`Asset ID: ${g}`}t.innerHTML=`
      <div style="
        display: flex;
        align-items: baseline;
        text-align: left;
        font-size: 72px;
        font-weight: bold;
        opacity: 0.8;
        text-shadow: -4px -4px 0 rgba(64, 64, 64, 0.8), 4px -4px 0 rgba(64, 64, 64, 0.8), -4px 4px 0 rgba(64, 64, 64, 0.8), 4px 4px 0 rgba(64, 64, 64, 0.8);
        color: #e0e0e0;
        position: absolute;
        left: 32px;
        top: 8px;
      ">
        <div id="display-identifier">${a}</div>
        <div id="asset-identifier" style="font-size: 48px; padding-left: 8px;">${c}</div>
      </div>
    `,document.body.appendChild(t),e>0?(this.identifyTimer=setTimeout(()=>{this.hideIdentify()},e*1e3),i.log(`Identify overlay shown for ${e} seconds`)):i.log("Identify overlay shown indefinitely (offline mode)")}hideIdentify(){const e=document.getElementById("identify-overlay");e&&e.remove(),this.identifyTimer&&(clearInterval(this.identifyTimer),this.identifyTimer=null),i.log("Identify overlay hidden")}async detectScreens(){window.app&&window.app.apiClient&&await window.app.apiClient.detectScreens(!1)}openSecondDisplay(){window.app&&window.app.apiClient&&window.app.apiClient.openSecondDisplay()}getVersion(){return"1.0.31"}showUnallocatedDevice(e){const t=document.getElementById("content-frame");t.innerHTML=`
      <div style="
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: #1a1a1a;
        color: white;
        font-family: Arial, sans-serif;
        padding: 40px;
        box-sizing: border-box;
      ">
        <h1 style="color: #4CAF50; margin-bottom: 40px; font-size: 48px;">Unallocated Device</h1>
        
        <div style="
          display: grid;
          grid-template-columns: auto 1fr;
          gap: 20px 40px;
          font-size: 24px;
          max-width: 800px;
          width: 100%;
        ">
          <div style="font-weight: bold; text-align: right;">Client Version:</div>
          <div style="font-family: monospace; color: #e0e0e0;">${e.clientVersion}</div>
          
          <div style="font-weight: bold; text-align: right;">Display Number:</div>
          <div style="font-family: monospace; color: #e0e0e0;">${e.displayNumber}</div>
          
          <div style="font-weight: bold; text-align: right;">Directory Device ID:</div>
          <div style="font-family: monospace; color: #e0e0e0;">${e.directoryDeviceId||"Not available"}</div>
          
          <div style="font-weight: bold; text-align: right;">Serial Number:</div>
          <div style="font-family: monospace; color: #e0e0e0;">${e.serialNumber||"Not available"}</div>
          
          <div style="font-weight: bold; text-align: right;">Asset ID:</div>
          <div style="font-family: monospace; color: #e0e0e0;">${e.assetId||"Not available"}</div>
          
          <div style="font-weight: bold; text-align: right;">Location:</div>
          <div style="font-family: monospace; color: #e0e0e0;">${e.location||"Not available"}</div>
          
          <div style="font-weight: bold; text-align: right;">IP Address:</div>
          <div style="font-family: monospace; color: #e0e0e0;">${e.ipAddress||"Not available"}</div>
          
          <div style="font-weight: bold; text-align: right;">OS Version:</div>
          <div style="font-family: monospace; color: #e0e0e0;">${e.osVersion||"Not available"}</div>
        </div>
        
        <div style="margin-top: 60px; font-size: 18px; color: #999; text-align: center;">
          This device is not allocated to a venue.
        </div>
      </div>
    `,setTimeout(()=>{this.app.displayManager.requestFullscreen()},1e3),i.log("Unallocated device screen displayed")}}class v{constructor(){this.displayManager=new y,this.apiClient=new f,this.ui=null,this.isInitialized=!1}async init(){var e;try{i.log("Initializing Venue Client PWA"),localStorage.removeItem("venue-client-settings"),await l.init(),l.registerOnChange(this.onSettingsChanged.bind(this)),this.displayManager.init(),console.log("window.config:",window.config),(e=window.config)!=null&&e.invenueHost&&(console.log("Setting invenueHost from config:",window.config.invenueHost),l.set("invenueHost",window.config.invenueHost));const t=l.get("invenueHost");console.log("Retrieved invenueHost from settings:",t),t&&this.apiClient.init(t),this.requestWakeLock(),this.setupFullscreen(),this.ui=new w(this),window.app=this;const s=new URLSearchParams(window.location.search).get("display")||"1",o=localStorage.getItem(`venue-url-${s}`);o&&this.ui.loadContentUrl(o),i.log(`Display ${s} initialized`),this.isInitialized=!0,i.log("App initialized successfully")}catch(t){i.error("Failed to initialize app:",t)}}async requestWakeLock(){if("wakeLock"in navigator)try{const e=await navigator.wakeLock.request("screen");i.log("Wake lock acquired"),e.addEventListener("release",()=>{i.log("Wake lock released")})}catch(e){i.error("Failed to acquire wake lock:",e)}}setupFullscreen(){setTimeout(()=>{document.fullscreenElement||this.displayManager.requestFullscreen()},3e3)}onSettingsChanged(e,t){i.log(`Setting changed: ${e} = ${t}`),e==="invenueHost"&&this.apiClient.updateHost(t)}}const b=new URLSearchParams(window.location.search),u=b.get("display")||"1";document.body.setAttribute("data-display",u);console.log("Set data-display attribute to:",u);"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("/sw.js").then(r=>{console.log("SW registered: ",r)}).catch(r=>{console.log("SW registration failed: ",r)})});const S=new v;S.init();
